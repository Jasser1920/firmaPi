security:
    # Password hashing configuration
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # User providers
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur  # Use your Utilisateur entity
                property: email  # Use the email field as the unique identifier

    # Firewalls
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider  # Use the app_user_provider
            custom_authenticator: App\Security\LoginAuthetificationAuthenticator  # Add your custom authenticator
            
            logout:
                path: app_logout  # Logout route
                target: app_login
                # target: app_any_route  # Optional: Redirect after logout

    # Access control rules
    access_control:
        # Example: Restrict access to /admin to users with ROLE_ADMIN
        - { path: ^/admin, roles: ROLE_admin }
        - { path: ^/, roles: PUBLIC_ACCESS }
        # Example: Restrict access to /profile to authenticated users
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # Use faster password hashing for tests
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon